#!/bin/bash

# Scandy scandy Management Script
# Generated by Universal Installer

INSTALL_MODE="docker"
INSTANCE_NAME="scandy"
WEB_PORT="5000"
DOCKER_CMD="docker"

# Service-Namen für systemd bestimmen
get_service_name() {
    local instance_name="$1"
    if [ "$instance_name" = "scandy" ]; then
        echo "scandy"
    else
        echo "scandy-$instance_name"
    fi
}

show_help() {
    echo "========================================"
    echo "Scandy $INSTANCE_NAME Management"
    echo "Installation: $INSTALL_MODE"
    echo "========================================"
    echo
    echo "Befehle:"
    echo "  start     - Scandy starten"
    echo "  stop      - Scandy stoppen"
    echo "  restart   - Scandy neustarten"
    echo "  status    - Status anzeigen"
    echo "  logs      - Logs anzeigen"
    echo "  update    - Update durchführen"
    echo "  backup    - Backup erstellen"
    echo "  shell     - Shell öffnen"
    echo "  info      - Informationen anzeigen"
    echo "  help      - Diese Hilfe"
}

case "$1" in
    start)
        case $INSTALL_MODE in
            docker)
                $DOCKER_CMD compose up -d
                ;;
            native)
                service_name=$(get_service_name "$INSTANCE_NAME")
                sudo systemctl start "$service_name"
                ;;
            lxc)
                systemctl restart scandy 2>/dev/null || {
                    cd /opt/scandy && sudo -u scandy ./start_scandy.sh &
                }
                ;;
        esac
        echo "Scandy $INSTANCE_NAME gestartet"
        ;;
    stop)
        case $INSTALL_MODE in
            docker)
                $DOCKER_CMD compose down
                ;;
            native)
                service_name=$(get_service_name "$INSTANCE_NAME")
                sudo systemctl stop "$service_name"
                ;;
            lxc)
                pkill -f "gunicorn.*scandy"
                ;;
        esac
        echo "Scandy $INSTANCE_NAME gestoppt"
        ;;
    restart)
        $0 stop
        sleep 2
        $0 start
        ;;
    status)
        case $INSTALL_MODE in
            docker)
                $DOCKER_CMD compose ps
                ;;
            native)
                service_name=$(get_service_name "$INSTANCE_NAME")
                systemctl status "$service_name"
                ;;
            lxc)
                ps aux | grep gunicorn | grep scandy
                ;;
        esac
        ;;
    logs)
        case $INSTALL_MODE in
            docker)
                $DOCKER_CMD compose logs -f
                ;;
            native)
                service_name=$(get_service_name "$INSTANCE_NAME")
                journalctl -u "$service_name" -f
                ;;
            lxc)
                tail -f /opt/scandy/logs/scandy.log
                ;;
        esac
        ;;
    update)
        case $INSTALL_MODE in
            docker)
                ./install_scandy_universal.sh --update
                ;;
            native)
                ./install_scandy_universal.sh --update
                ;;
            lxc)
                # LXC-spezifisches Update
                SOURCE_DIR="/Scandy2"
                TARGET_DIR="/opt/scandy"
                
                # Prüfe verschiedene mögliche Quellverzeichnisse
                if [ ! -d "$SOURCE_DIR" ]; then
                    if [ -d "/scandy2" ]; then
                        SOURCE_DIR="/scandy2"
                    elif [ -d "/Scandy" ]; then
                        SOURCE_DIR="/Scandy"
                    elif [ -d "/scandy" ]; then
                        SOURCE_DIR="/scandy"
                    elif [ -d "/home/scandy/Scandy2" ]; then
                        SOURCE_DIR="/home/scandy/Scandy2"
                    elif [ -d "/root/Scandy2" ]; then
                        SOURCE_DIR="/root/Scandy2"
                    else
                        echo "Quellverzeichnis nicht gefunden!"
                        find / -name "*scandy*" -type d 2>/dev/null | head -5
                        exit 1
                    fi
                fi
                
                echo "LXC Update gestartet..."
                echo "Quellverzeichnis: $SOURCE_DIR"
                
                # Git Pull
                cd "$SOURCE_DIR"
                git pull origin main || git pull origin master || git pull origin IT-VW || {
                    echo "Git pull fehlgeschlagen"
                }
                
                # Backup
                if [ -d "$TARGET_DIR/app" ]; then
                    BACKUP_DIR="$TARGET_DIR/app.backup.$(date +%Y%m%d_%H%M%S)"
                    cp -r "$TARGET_DIR/app" "$BACKUP_DIR" 2>/dev/null
                    echo "Backup: $BACKUP_DIR"
                fi
                
                # Code kopieren
                if cp -r "$SOURCE_DIR/app"/* "$TARGET_DIR/app/" 2>/dev/null; then
                    echo "Code kopiert!"
                else
                    echo "Fehler beim Kopieren!"
                    exit 1
                fi
                
                # Berechtigungen
                chown -R scandy:scandy "$TARGET_DIR/app" 2>/dev/null
                
                # Service neu starten
                systemctl restart scandy 2>/dev/null || {
                    echo "systemctl fehlgeschlagen, versuche alternative Methoden..."
                    if [ -f "$TARGET_DIR/docker-compose.yml" ]; then
                        cd "$TARGET_DIR"
                        docker compose restart 2>/dev/null || docker compose up -d 2>/dev/null
                    fi
                }
                
                echo "LXC Update abgeschlossen!"
                ;;
        esac
        ;;
    info)
        echo "========================================"
        echo "Scandy $INSTANCE_NAME Informationen"
        echo "========================================"
        echo "Installation: $INSTALL_MODE"
        echo "Web-App: http://localhost:$WEB_PORT"
        echo "Instance: $INSTANCE_NAME"
        echo "========================================"
        ;;
    *)
        show_help
        ;;
esac
