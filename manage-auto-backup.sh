#!/bin/bash

echo "üîß Automatische Scandy Backups verwalten"
echo "========================================"

# Pr√ºfe ob wir im richtigen Verzeichnis sind
if [[ ! -f "docker-compose.yml" ]]; then
    echo "‚ùå Keine Scandy-Installation gefunden!"
    echo "F√ºhren Sie zuerst install.sh aus."
    exit 1
fi

echo "‚úÖ Scandy-Installation gefunden"

echo ""
echo "üìã Verf√ºgbare Aktionen:"
echo "1. Status der automatischen Backups anzeigen"
echo "2. Automatische Backups aktivieren/einrichten"
echo "3. Automatische Backups deaktivieren"
echo "4. Backup-Zeiten √§ndern"
echo "5. Backup-Logs anzeigen"
echo "6. Manuelles Backup erstellen"
echo "7. Backup-Verzeichnis √∂ffnen"
echo "8. Beenden"
echo ""
read -p "W√§hlen Sie eine Aktion (1-8): " action

case $action in
    1)
        echo ""
        echo "üìä Status der automatischen Backups:"
        echo ""
        echo "Cron-Jobs:"
        if crontab -l 2>/dev/null | grep -q "Scandy Auto Backup"; then
            crontab -l | grep "Scandy Auto Backup"
        else
            echo "‚ùå Keine Cron-Jobs gefunden"
        fi
        
        # Pr√ºfe Konfigurationsdatei
        if [[ -f "auto_backup_config.txt" ]]; then
            echo ""
            echo "üìù Konfiguration:"
            cat auto_backup_config.txt
        else
            echo ""
            echo "‚ùå Keine Konfigurationsdatei gefunden"
        fi
        
        # Pr√ºfe Backup-Verzeichnis
        if [[ -d "backups/auto" ]]; then
            echo ""
            echo "üìÅ Backup-Verzeichnis: backups/auto"
            echo "Anzahl Backups: $(ls -1 backups/auto/auto_backup_*.tar.gz 2>/dev/null | wc -l)"
            echo "(Maximal 14 Backups - 7 Tage √ó 2x t√§glich)"
        else
            echo ""
            echo "‚ùå Backup-Verzeichnis nicht gefunden"
        fi
        
        # Pr√ºfe Log-Datei
        if [[ -f "auto_backup.log" ]]; then
            echo ""
            echo "üìã Letzte Log-Eintr√§ge:"
            tail -5 auto_backup.log
        else
            echo ""
            echo "‚ùå Keine Log-Datei gefunden"
        fi
        ;;
    2)
        echo ""
        echo "üîÑ Einrichtung automatischer Backups..."
        ./setup-auto-backup.sh
        ;;
    3)
        echo ""
        echo "‚ö†Ô∏è  Automatische Backups deaktivieren..."
        echo ""
        read -p "Sind Sie sicher? (j/n): " confirm
        if [[ $confirm =~ ^[Jj]$ ]]; then
            echo "L√∂sche Cron-Jobs..."
            crontab -l 2>/dev/null | grep -v "Scandy Auto Backup" | crontab -
            echo "‚úÖ Automatische Backups deaktiviert!"
            echo ""
            echo "üí° Hinweis: Bestehende Backups bleiben erhalten."
        fi
        ;;
    4)
        echo ""
        echo "‚è∞ Backup-Zeiten √§ndern..."
        echo ""
        echo "Aktuelle Cron-Jobs:"
        crontab -l 2>/dev/null | grep "Scandy Auto Backup"
        echo ""
        echo "Verf√ºgbare Optionen:"
        echo "1. Morgens 06:00 und Abends 18:00"
        echo "2. Morgens 08:00 und Abends 20:00"
        echo "3. Benutzerdefiniert"
        echo ""
        read -p "W√§hlen Sie eine Option (1-3): " time_choice
        
        case $time_choice in
            1)
                MORNING_TIME="06:00"
                EVENING_TIME="18:00"
                MORNING_CRON="0 6 * * *"
                EVENING_CRON="0 18 * * *"
                ;;
            2)
                MORNING_TIME="08:00"
                EVENING_TIME="20:00"
                MORNING_CRON="0 8 * * *"
                EVENING_CRON="0 20 * * *"
                ;;
            3)
                echo ""
                read -p "Morgens Backup-Zeit (HH:MM): " MORNING_TIME
                read -p "Abends Backup-Zeit (HH:MM): " EVENING_TIME
                
                # Konvertiere HH:MM zu Cron-Format
                MORNING_HOUR=$(echo $MORNING_TIME | cut -d: -f1)
                MORNING_MINUTE=$(echo $MORNING_TIME | cut -d: -f2)
                EVENING_HOUR=$(echo $EVENING_TIME | cut -d: -f1)
                EVENING_MINUTE=$(echo $EVENING_TIME | cut -d: -f2)
                
                MORNING_CRON="$MORNING_MINUTE $MORNING_HOUR * * *"
                EVENING_CRON="$EVENING_MINUTE $EVENING_HOUR * * *"
                ;;
            *)
                echo "Ung√ºltige Auswahl."
                exit 1
                ;;
        esac
        
        echo ""
        echo "üîÑ Aktualisiere Cron-Jobs..."
        
        # Erstelle tempor√§re Cron-Datei
        TEMP_CRON=$(mktemp)
        
        # Hole bestehende Cron-Jobs
        crontab -l 2>/dev/null | grep -v "Scandy Auto Backup" > "$TEMP_CRON"
        
        # F√ºge neue Cron-Jobs hinzu
        SCRIPT_PATH="$(pwd)/auto-backup.sh"
        echo "# Scandy Auto Backup - Morgens $MORNING_TIME" >> "$TEMP_CRON"
        echo "$MORNING_CRON $SCRIPT_PATH >> $(pwd)/auto_backup.log 2>&1" >> "$TEMP_CRON"
        echo "# Scandy Auto Backup - Abends $EVENING_TIME" >> "$TEMP_CRON"
        echo "$EVENING_CRON $SCRIPT_PATH >> $(pwd)/auto_backup.log 2>&1" >> "$TEMP_CRON"
        
        # Installiere neue Cron-Jobs
        if crontab "$TEMP_CRON"; then
            echo "‚úÖ Backup-Zeiten aktualisiert!"
            echo "- Morgens: $MORNING_TIME"
            echo "- Abends: $EVENING_TIME"
        else
            echo "‚ùå Fehler beim Aktualisieren der Cron-Jobs!"
        fi
        
        # L√∂sche tempor√§re Datei
        rm -f "$TEMP_CRON"
        ;;
    5)
        echo ""
        echo "üìã Backup-Logs anzeigen..."
        if [[ -f "auto_backup.log" ]]; then
            echo ""
            echo "Letzte 20 Log-Eintr√§ge:"
            echo "======================="
            tail -20 auto_backup.log
            echo ""
            read -p "Vollst√§ndige Log-Datei √∂ffnen? (j/n): " open_log
            if [[ $open_log =~ ^[Jj]$ ]]; then
                if command -v nano >/dev/null 2>&1; then
                    nano auto_backup.log
                elif command -v vim >/dev/null 2>&1; then
                    vim auto_backup.log
                else
                    cat auto_backup.log
                fi
            fi
        else
            echo "‚ùå Keine Log-Datei gefunden!"
        fi
        ;;
    6)
        echo ""
        echo "üì¶ Manuelles Backup erstellen..."
        echo ""
        read -p "Soll ein manuelles Backup erstellt werden? (j/n): " confirm
        if [[ $confirm =~ ^[Jj]$ ]]; then
            echo "F√ºhre manuelles Backup aus..."
            ./auto-backup.sh
        fi
        ;;
    7)
        echo ""
        echo "üìÅ Backup-Verzeichnis √∂ffnen..."
        if [[ -d "backups/auto" ]]; then
            if command -v xdg-open >/dev/null 2>&1; then
                xdg-open "backups/auto"
            elif command -v open >/dev/null 2>&1; then
                open "backups/auto"
            else
                echo "Verzeichnis: $(pwd)/backups/auto"
                ls -la "backups/auto"
            fi
        else
            echo "‚ùå Backup-Verzeichnis nicht gefunden!"
        fi
        ;;
    8)
        echo "Beenden..."
        exit 0
        ;;
    *)
        echo "Ung√ºltige Auswahl."
        ;;
esac

echo "" 